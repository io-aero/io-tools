{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"IO-TEMPLATE - Template Library TODO","title":"Home"},{"location":"index.html#io-template-template-library","text":"","title":"IO-TEMPLATE - Template Library"},{"location":"index.html#todo","text":"","title":"TODO"},{"location":"LICENSE.html","text":"End-User License Agreement (EULA) of IO-Aero Software This End-User License Agreement (\" EULA \") is a legal agreement between you and IO-Aero . This EULA agreement governs your acquisition and use of our IO-Aero Software (\"Software\") directly from IO-Aero or indirectly through a IO-Aero authorized reseller or distributor (a \"Reseller\"). Please read this EULA agreement carefully before completing the installation process and using the IO-Aero Software . It provides a license to use the IO-Aero Software and contains warranty information and liability disclaimers. If you register for a free trial of the IO-Aero Software , this EULA agreement will also govern that trial. By clicking \"accept\" or installing and/or using the IO-Aero Software , you are confirming your acceptance of the Software and agreeing to become bound by the terms of this EULA agreement. If you are entering into this EULA agreement on behalf of a company or other legal entity, you represent that you have the authority to bind such entity and its affiliates to these terms and conditions. If you do not have such authority or if you do not agree with the terms and conditions of this EULA agreement, do not install or use the Software, and you must not accept this EULA agreement. This EULA agreement shall apply only to the Software supplied by IO-Aero herewith regardless of whether other software is referred to or described herein. The terms also apply to any IO-Aero updates, supplements, Internet-based services, and support services for the Software, unless other terms accompany those items on delivery. If so, those terms apply. License Grant IO-Aero hereby grants you a personal, non-transferable, non-exclusive licence to use the IO-Aero Software on your devices in accordance with the terms of this EULA agreement. You are permitted to load the IO-Aero Software (for example a PC, laptop, mobile or tablet) under your control. You are responsible for ensuring your device meets the minimum requirements of the IO-Aero Software . You are not permitted to: Edit, alter, modify, adapt, translate or otherwise change the whole or any part of the Software nor permit the whole or any part of the Software to be combined with or become incorporated in any other software, nor decompile, disassemble or reverse engineer the Software or attempt to do any such things Reproduce, copy, distribute, resell or otherwise use the Software for any commercial purpose Allow any third party to use the Software on behalf of or for the benefit of any third party Use the Software in any way which breaches any applicable local, national or international law use the Software for any purpose that IO-Aero considers is a breach of this EULA agreement Intellectual Property and Ownership IO-Aero shall at all times retain ownership of the Software as originally downloaded by you and all subsequent downloads of the Software by you. The Software (and the copyright, and other intellectual property rights of whatever nature in the Software, including any modifications made thereto) are and shall remain the property of IO-Aero . IO-Aero reserves the right to grant licences to use the Software to third parties. Termination This EULA agreement is effective from the date you first use the Software and shall continue until terminated. You may terminate it at any time upon written notice to IO-Aero . It will also terminate immediately if you fail to comply with any term of this EULA agreement. Upon such termination, the licenses granted by this EULA agreement will immediately terminate, and you agree to stop all access and use of the Software. The provisions that by their nature continue and survive will survive any termination of this EULA agreement. Governing Law This EULA agreement, and any dispute arising out of or in connection with this EULA agreement, shall be governed by and construed in accordance with the laws of the United States.","title":"License"},{"location":"LICENSE.html#end-user-license-agreement-eula-of-io-aero-software","text":"This End-User License Agreement (\" EULA \") is a legal agreement between you and IO-Aero . This EULA agreement governs your acquisition and use of our IO-Aero Software (\"Software\") directly from IO-Aero or indirectly through a IO-Aero authorized reseller or distributor (a \"Reseller\"). Please read this EULA agreement carefully before completing the installation process and using the IO-Aero Software . It provides a license to use the IO-Aero Software and contains warranty information and liability disclaimers. If you register for a free trial of the IO-Aero Software , this EULA agreement will also govern that trial. By clicking \"accept\" or installing and/or using the IO-Aero Software , you are confirming your acceptance of the Software and agreeing to become bound by the terms of this EULA agreement. If you are entering into this EULA agreement on behalf of a company or other legal entity, you represent that you have the authority to bind such entity and its affiliates to these terms and conditions. If you do not have such authority or if you do not agree with the terms and conditions of this EULA agreement, do not install or use the Software, and you must not accept this EULA agreement. This EULA agreement shall apply only to the Software supplied by IO-Aero herewith regardless of whether other software is referred to or described herein. The terms also apply to any IO-Aero updates, supplements, Internet-based services, and support services for the Software, unless other terms accompany those items on delivery. If so, those terms apply.","title":"End-User License Agreement (EULA) of IO-Aero Software"},{"location":"library_api_documentation.html","text":"IO-TEMPLATE - Library - API Documentation Documentation for the module template Miscellaneous helper functions. terminate_fatal ( error_msg ) Terminate the application immediately. Parameters: Name Type Description Default error_msg str Error message. required Source code in src\\io_template\\io_utils.py 75 76 77 78 79 80 81 82 83 84 85 86 def terminate_fatal ( error_msg : str ) -> None : \"\"\"Terminate the application immediately. Args: error_msg (str): Error message. \"\"\" print ( \"\" ) print ( _LOGGER_FATAL_HEAD ) print ( _LOGGER_FATAL_HEAD , error_msg , _LOGGER_FATAL_TAIL , sep = \"\" ) print ( _LOGGER_FATAL_HEAD ) sys . exit ( 1 )","title":"API Documentation"},{"location":"library_api_documentation.html#io-template-library-api-documentation","text":"","title":"IO-TEMPLATE - Library - API Documentation"},{"location":"library_api_documentation.html#documentation-for-the-module-template","text":"Miscellaneous helper functions.","title":"Documentation for the module template"},{"location":"library_api_documentation.html#src.io_template.io_utils.terminate_fatal","text":"Terminate the application immediately. Parameters: Name Type Description Default error_msg str Error message. required Source code in src\\io_template\\io_utils.py 75 76 77 78 79 80 81 82 83 84 85 86 def terminate_fatal ( error_msg : str ) -> None : \"\"\"Terminate the application immediately. Args: error_msg (str): Error message. \"\"\" print ( \"\" ) print ( _LOGGER_FATAL_HEAD ) print ( _LOGGER_FATAL_HEAD , error_msg , _LOGGER_FATAL_TAIL , sep = \"\" ) print ( _LOGGER_FATAL_HEAD ) sys . exit ( 1 )","title":"terminate_fatal()"},{"location":"library_configuration.html","text":"IO-TEMPLATE - Library - Configuration 1. logging_cfg.yaml This file controls the logging behaviour of the application. Default content : version: 1 formatters: simple: format: \"%(asctime)s [%(module)s.py ] %(levelname)-5s %(funcName)s:%(lineno)d %(message)s\" extended: format: \"%(asctime)s [%(module)s.py ] %(levelname)-5s %(funcName)s:%(lineno)d \\n%(message)s\" handlers: console: class: logging.StreamHandler level: INFO formatter: simple file_handler: class: logging.FileHandler level: INFO filename: logging_io-template.log formatter: extended loggers: io-template: handlers: [ console ] root: handlers: [ file_handler ] 2. settings.io_template.toml This file controls the behaviour of the IO-TEMPLATE library. The customisable entries are: Parameter Default Description is_verbose true Display progress messages for processing. The configuration parameters can be set differently for the individual environments ( dev , prod and test ). Examples : [default] is_verbose = true [dev] [prod] [test] is_verbose = true ...","title":"Configuration"},{"location":"library_configuration.html#io-template-library-configuration","text":"","title":"IO-TEMPLATE - Library - Configuration"},{"location":"library_configuration.html#1-logging_cfgyaml","text":"This file controls the logging behaviour of the application. Default content : version: 1 formatters: simple: format: \"%(asctime)s [%(module)s.py ] %(levelname)-5s %(funcName)s:%(lineno)d %(message)s\" extended: format: \"%(asctime)s [%(module)s.py ] %(levelname)-5s %(funcName)s:%(lineno)d \\n%(message)s\" handlers: console: class: logging.StreamHandler level: INFO formatter: simple file_handler: class: logging.FileHandler level: INFO filename: logging_io-template.log formatter: extended loggers: io-template: handlers: [ console ] root: handlers: [ file_handler ]","title":"1. logging_cfg.yaml"},{"location":"library_configuration.html#2-settingsio_templatetoml","text":"This file controls the behaviour of the IO-TEMPLATE library. The customisable entries are: Parameter Default Description is_verbose true Display progress messages for processing. The configuration parameters can be set differently for the individual environments ( dev , prod and test ). Examples : [default] is_verbose = true [dev] [prod] [test] is_verbose = true ...","title":"2. settings.io_template.toml"},{"location":"library_installation.html","text":"IO-TEMPLATE - Library - Installation 1. Use as a library TODO 2. Use of a Docker container TODO A fully functional Docker image is available here on DockerHub. From this, a local Docker container can be created with the following command: docker run -it --name io_template -v <local directory>:/io_template/data/inbox_prod io-aero/io_template:0.9.1 <local directory> is the local directory where the files created during the processing are stored. In addition to the software listed under prerequisites, the Docker container also contains a complete virtual environment for running IO-TEMPLATE in suitable versions.","title":"Installaion"},{"location":"library_installation.html#io-template-library-installation","text":"","title":"IO-TEMPLATE - Library - Installation"},{"location":"library_installation.html#1-use-as-a-library","text":"TODO","title":"1. Use as a library"},{"location":"library_installation.html#2-use-of-a-docker-container","text":"TODO A fully functional Docker image is available here on DockerHub. From this, a local Docker container can be created with the following command: docker run -it --name io_template -v <local directory>:/io_template/data/inbox_prod io-aero/io_template:0.9.1 <local directory> is the local directory where the files created during the processing are stored. In addition to the software listed under prerequisites, the Docker container also contains a complete virtual environment for running IO-TEMPLATE in suitable versions.","title":"2. Use of a Docker container"},{"location":"library_requirements.html","text":"IO-TEMPLATE - Library - Requirements The required software is listed below. Regarding the corresponding software versions, you will find the detailed information in the Release Notes . 1. Operating System TODO Continuous delivery / integration (CD/CI) runs on Ubuntu and development is done with Windows 10 . For the Windows operating systems, only additional the functionality of the make tool must be made available, e.g. via Make for Windows . 2. Python Because of the use of the new typing features, Python is required.","title":"Requirements"},{"location":"library_requirements.html#io-template-library-requirements","text":"The required software is listed below. Regarding the corresponding software versions, you will find the detailed information in the Release Notes .","title":"IO-TEMPLATE - Library - Requirements"},{"location":"library_requirements.html#1-operating-system","text":"TODO Continuous delivery / integration (CD/CI) runs on Ubuntu and development is done with Windows 10 . For the Windows operating systems, only additional the functionality of the make tool must be made available, e.g. via Make for Windows .","title":"1. Operating System"},{"location":"library_requirements.html#2-python","text":"Because of the use of the new typing features, Python is required.","title":"2. Python"},{"location":"release_history.html","text":"IO-TEMPLATE - Release History TODO","title":"Release History"},{"location":"release_history.html#io-template-release-history","text":"TODO","title":"IO-TEMPLATE - Release History"},{"location":"release_notes.html","text":"IO-TEMPLATE - Release Notes 1. Version 9.9.9 TODO Release Date: dd.mm.2022 TODO 1.1 New Features TODO 1.2 Modified Features TODO 1.3 Deleted Features TODO 1.4 Applied Software TODO Component Version Remark Status Python3 3.10.8 Windows-specific Software Software Version Remark Status Make for Windows 3.81 base version 1.5 Open Issues TODO 2. Detailed Open Issues","title":"Release Notes"},{"location":"release_notes.html#io-template-release-notes","text":"","title":"IO-TEMPLATE - Release Notes"},{"location":"release_notes.html#1-version-999-todo","text":"Release Date: dd.mm.2022 TODO","title":"1. Version 9.9.9 TODO"},{"location":"release_notes.html#11-new-features","text":"TODO","title":"1.1 New Features"},{"location":"release_notes.html#12-modified-features","text":"TODO","title":"1.2 Modified Features"},{"location":"release_notes.html#13-deleted-features","text":"TODO","title":"1.3 Deleted Features"},{"location":"release_notes.html#14-applied-software","text":"TODO Component Version Remark Status Python3 3.10.8","title":"1.4 Applied Software"},{"location":"release_notes.html#15-open-issues","text":"TODO","title":"1.5 Open Issues"},{"location":"release_notes.html#2-detailed-open-issues","text":"","title":"2. Detailed Open Issues"},{"location":"release_schedule.html","text":"IO-TEMPLATE - Release Schedule To create a new release, the following steps must be performed in the specified order. It is not allowed to continue with the next step until the current step has been completed successfully, i.e. also without any errors. 1. Manual quality control . a) Remove all personal markers. It is good practice to mark experimental source code, such as source code comments or logging messages that are only used for testing, with a uniform personal marker, such as lho or wwe , so that this source code can be easily discovered and removed for release builds. b) Check all TODO markers for necessity. c) Check all links in the docs file directory. Links should generally contain the following suffix: {:target=\"_blank\"} . This ensures that a web page activated by the link is opened in a new tab. d) Unnecessary annotations @pytest.mark.issue in the file directory tests . This annotation can be used to run individual tests selectively. To remove the remains of it one can use the regular expression ^@pytest.mark.issue . 2. Define a new version number . The rules of semantic versioning must be applied. Given a version number MAJOR.MINOR.PATCH, increment the: MAJOR version when you make incompatible API changes MINOR version when you add functionality in a backwards compatible manner PATCH version when you make backwards compatible bug fixes See here for details. a) Update the version number in the IO-TEMPLATE files: pyproject.toml docs/development_environment.md docs/library_installation.md docs/release_history.md docs/release_notes.md src//io_glob.py b) Update the project in io-docker and io-docker-shared. Check the versions of the software to be installed and adjust them if necessary. Create the Docker image that matches the new version. c) Copy the IO-TEMPLATE specific project 9.9.9 from io-docker to io-template/scripts/9.9.9 . 3. Create release candidate branch <rel_branch> . 4. Check the functionality of IO-TEMPLATE in the docker container and in the VM . a) Create the Docker image in the IO-TEMPLATE repository. b) Manually test the functionality of IO-TEMPLATE in the Docker container. c) Create a clean virtual machine (VM) with the scripts. d) Start the VM and clone the IO-TEMPLATE repository. git clone https://github.com/io-aero/io-template 5. Switch to the release candidate branch <rel_branch> . git checkout <rel_branch> 6. Finalise the new release . a. Execute the following command in the IO-TEMPLATE clone. make final b. Create the final pull request. c. Create the new release in GitHub: Releases --> Create a new release Choose a tag ---> 9.9.9 ---> + Create a new tag Release title ---> Release 9.9.9: <headline> . Describe the release ---> see: https://github.com/io-aero/io-template/blob/main/docs/release_notes.md x This is a pre-release x Create a discussion for this release Publish release 7. Preepare the next release . a. Choose a new preliminary version number. b. Prepare the following files in the io-template repository for the new version: pyproject.toml docs/development_environment.md docs/library_installation.md docs/release_history.md docs/release_notes.md src//io_glob.py c. Prepare io-template project in the repositories io-docker und io-docker-shared for the new version:","title":"Release Schedule"},{"location":"release_schedule.html#io-template-release-schedule","text":"To create a new release, the following steps must be performed in the specified order. It is not allowed to continue with the next step until the current step has been completed successfully, i.e. also without any errors.","title":"IO-TEMPLATE - Release Schedule"},{"location":"release_schedule.html#1-manual-quality-control","text":"","title":"1. Manual quality control."},{"location":"release_schedule.html#2-define-a-new-version-number","text":"The rules of semantic versioning must be applied. Given a version number MAJOR.MINOR.PATCH, increment the: MAJOR version when you make incompatible API changes MINOR version when you add functionality in a backwards compatible manner PATCH version when you make backwards compatible bug fixes See here for details.","title":"2. Define a new version number."},{"location":"release_schedule.html#3-create-release-candidate-branch-rel_branch","text":"","title":"3. Create release candidate branch &lt;rel_branch&gt;."},{"location":"release_schedule.html#4-check-the-functionality-of-io-template-in-the-docker-container-and-in-the-vm","text":"","title":"4. Check the functionality of IO-TEMPLATE in the docker container and in the VM."},{"location":"release_schedule.html#5-switch-to-the-release-candidate-branch-rel_branch","text":"git checkout <rel_branch>","title":"5. Switch to the release candidate branch &lt;rel_branch&gt;."},{"location":"release_schedule.html#6-finalise-the-new-release","text":"","title":"6. Finalise the new release."},{"location":"release_schedule.html#7-preepare-the-next-release","text":"","title":"7. Preepare the next release."},{"location":"img/index.html","text":"IO-TEMPLATE - File Directory docs/img This directory contains all the image files used in the documentation.","title":"IO-TEMPLATE - File Directory **`docs/img`**"},{"location":"img/index.html#io-template-file-directory-docsimg","text":"This directory contains all the image files used in the documentation.","title":"IO-TEMPLATE - File Directory docs/img"}]}